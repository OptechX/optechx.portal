@using OptechX.Portal.Shared.Models.Engine.ImageBuilds
@using System.Linq
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IFormsService FormsService

@inject IJSRuntime JSRuntime


<div class="row ml-4">
    <h3>@pageTitle</h3>
</div>

<div class="container">
    @if (!isOrderBuilt)
    {
        <div class="row-item mb-2">
            <div class="circle-yellow"></div>
            <div class="text">Compiling image design</div>
        </div>
    }
    else
    {
        <div class="row-item mb-2">
            <div class="circle-blue"></div>
            <div class="text">Image design compiled</div>
        </div>
    }
    @if (!isOrderSubmitted)
    {
        <div class="row-item mb-2">
            <div class="circle-yellow"></div>
            <div class="text">Order waiting to be submit</div>
        </div>
    }
    else
    {
        <div class="row-item mb-2">
            <div class="circle-blue"></div>
            <div class="text">Order submission complete</div>
        </div>
    }
</div>
    

@code {
    [Parameter]
    public string? accountId { get; set; }

    private string pageTitle { get; } = "Order Submission";

    private bool isOrderBuilt { get; set; }
    private bool isOrderSubmitted { get; set; }

    private string[] keys = {
        "imageParam1", "imageParam2", "imageParam3", "imageParam4", "imageParam5",
        "imageParam6", "imageParam7", "imageParam8", "imageParam9", "imageParam10",
        "imageParam11", "imageParam12", "imageParam13", "imageParam14", "imageParam15",
        "imageParam16", "imageParam17", "imageParam18", "imageParam19",
    };

    private string? release { get; set; }
    private string? edition { get; set; }
    private string? version { get; set; }
    private string? arch { get; set; }
    private string? language { get; set; }
    private string? format { get; set; }
    private string? apps { get; set; }
    private string? drivers { get; set; }
    private string? adminuser { get; set; }
    private string? adminpass { get; set; }
    private string? regkeys { get; set; }
    private string? capabilities { get; set; }
    private string? optionalfeatures { get; set; }
    private bool ciapps { get; set; }
    private bool cidrivers { get; set; }
    private bool cisecurity { get; set; }
    private bool cicd { get; set; }
    private bool notifycomplete { get; set; }
    private bool notifycicdcomplete { get; set; }

    ImageBuildBasic? imageBuild;

    private List<string> SelectedAppItems { get; set; } = new List<string>();
    private List<string> SelectedDriverItems { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
    }

    private async Task InitializeAsync()
    {
        isOrderBuilt = false;

        // Retrieve query parameters
        release = (await LocalStorage.GetItemAsStringAsync("imageParam1")).Replace("\"", "");
        edition = (await LocalStorage.GetItemAsStringAsync("imageParam2")).Replace("\"", "");
        version = (await LocalStorage.GetItemAsStringAsync("imageParam3")).Replace("\"", "");
        arch = (await LocalStorage.GetItemAsStringAsync("imageParam4")).Replace("\"", "");
        language = (await LocalStorage.GetItemAsStringAsync("imageParam5")).Replace("\"", "");
        format = (await LocalStorage.GetItemAsStringAsync("imageParam6")).Replace("\"", "");
        apps = (await LocalStorage.GetItemAsStringAsync("imageParam7")).Replace("\"", "");
        drivers = (await LocalStorage.GetItemAsStringAsync("imageParam8")).Replace("\"","");
        adminuser = await LocalStorage.GetItemAsStringAsync("imageParam9");
        adminpass = await LocalStorage.GetItemAsStringAsync("imageParam10");
        regkeys = (await LocalStorage.GetItemAsStringAsync("imageParam11")).Replace("\"", "");
        capabilities = (await LocalStorage.GetItemAsStringAsync("imageParam12")).Replace("\"", "");
        optionalfeatures = (await LocalStorage.GetItemAsStringAsync("imageParam13")).Replace("\"", "");
        ciapps = await LocalStorage.GetItemAsync<bool>("imageParam14");
        cidrivers = await LocalStorage.GetItemAsync<bool>("imageParam15");
        cisecurity = await LocalStorage.GetItemAsync<bool>("imageParam16");
        cicd = await LocalStorage.GetItemAsync<bool>("imageParam17");
        notifycomplete = await LocalStorage.GetItemAsync<bool>("imageParam18");
        notifycicdcomplete = await LocalStorage.GetItemAsync<bool>("imageParam19");

        await LocalStorage.RemoveItemsAsync(keys);

        // Initialize the imageBuild object with the retrieved values
        imageBuild = new ImageBuildBasic
        {
            Id = 0,
            AccountId = accountId,
            OrderDate = DateTime.UtcNow,
            OrderLifecycle = "SUBMITTED",
            DownloadLink = null,
            ImageFormat = format,
            ContinuousIntegrationApplications = ciapps,
            ContinuousIntegrationDrivers = cidrivers,
            IntegrateSecurityPatches = cisecurity,
            WindowsRelease = release,
            WindowsEdition = edition,
            WindowsVersion = version,
            Arch = arch,
            Language = language.Contains("English (United States)") ? "EN_US" : "MUI",
            Drivers = drivers.Split(',').ToList(),
            Applications = apps.Split(',').ToList(),
            AppxProvisionedPackages = null,
            WindowsCapabilities = capabilities.Split(',').ToList(),
            WindowsOptionalFeatures = optionalfeatures.Split(',').ToList(),
            CustomRegistryStrings = regkeys.Split(',').ToList(),
            NotifyBuildComplete = notifycicdcomplete,
            NotifyCICDComplete = notifycicdcomplete,
        };

        await Task.Delay(2000);
        isOrderBuilt = true;
        StateHasChanged();

        await Task.Delay(2000);

    }
}
