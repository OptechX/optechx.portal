@using OptechX.Portal.Shared.Models.Forms
@using OptechX.Portal.Shared.Models.Engine.ImageBuilds
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IFormsService FormsService

@inject IJSRuntime JSRuntime


<div class="row ml-4">
    <h3>@pageTitle</h3>
</div>


@code {
    private string pageTitle { get; } = "Order Submission";
    

    ImageBuildBasic? imageBuild;

    private List<string> SelectedAppItems { get; set; } = new List<string>();
    private List<string> SelectedDriverItems { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
    }

    private async Task InitializeAsync()
    {
        // Retrieve query parameters
        var release = await LocalStorage.GetItemAsStringAsync("imageParam1");
        var edition = await LocalStorage.GetItemAsStringAsync("imageParam2");
        var version = await LocalStorage.GetItemAsStringAsync("imageParam3");
        var arch = await LocalStorage.GetItemAsStringAsync("imageParam4");
        var language = await LocalStorage.GetItemAsStringAsync("imageParam5");
        var format = await LocalStorage.GetItemAsStringAsync("imageParam6");

        // Initialize the imageBuild object with the retrieved values
        imageBuild = new ImageBuildBasic
        {
            WindowsRelease = release.Replace("\"", ""),
            WindowsEdition = edition.Replace("\"", ""),
            WindowsVersion = version.Replace("\"", ""),
            Arch = arch.Replace("\"", ""),
            Language = language.Replace("\"", ""),
            ImageFormat = format.Replace("\"", ""),
        };

        // Perform any additional asynchronous initialization tasks here if needed
        var getApplicationTask = arch != null ? FormsService.GetApplicationTableApiResultsAsync(select: imageBuild.Arch) : Task.CompletedTask;
        var getDriverTask = release != null ? FormsService.GetDriverTableApiResultsAsync(select: imageBuild.WindowsRelease) : Task.CompletedTask;

        await Task.WhenAll(getApplicationTask, getDriverTask);

        
    }
}
