@using OptechX.Portal.Shared.Models.User
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>OptechX Portal</PageTitle>

<h3>Re-Request Account Verification</h3>

<p>
    Please provide your email address to request a new account verification <i class="bi bi-patch-check-fill" style="color: #1DA1F2;"></i>
    token.
</p>

<p>If you've already requested one before, you can also <a href="/account/verify-account">click here</a> to quickly verify your account.</p>

<EditForm Model="resendVerifyTokenRequest" OnValidSubmit="HandleResendVerifyRequest">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group mb-3">
        <label for="email">Email Address</label>
        <InputText id="email" @bind-Value="resendVerifyTokenRequest.ResetEmailAddress" class="form-control"></InputText>
        <ValidationMessage For="@(() => resendVerifyTokenRequest.ResetEmailAddress)" />
    </div>
    
    <!-- Submit button -->
    @if (showSubmitButton)
    {
        <button type="submit" class="btn btn-primary">Request New Token</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary btn-secondary" style="cursor: not-allowed; color: grey; font-style: italic;" disabled>Requesting...</button>
    }
</EditForm>

@code {
    private bool showSubmitButton;
    private ResetPasswordRequest resendVerifyTokenRequest = new();

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var token = query["email"];
        if (!string.IsNullOrEmpty(token))
        {
            resendVerifyTokenRequest.ResetEmailAddress = token;
        }
        showSubmitButton = true;
    }

    private async Task HandleResendVerifyRequest()
    {
        showSubmitButton = false;
        ToastService.ShowSuccess("Token regeneration request submitted");
        _ = await AuthService.GetNewVerificationToken(emailAddress: resendVerifyTokenRequest.ResetEmailAddress);
        await Task.Delay(2000);
        ToastService.ShowInfo("Redirecting...");
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/account/verify-account");
    }
}
