@page "/support/new"

@using Microsoft.AspNetCore.Components.Forms
@using OptechX.Portal.Shared.Models.SupportTickets
@using OptechX.Portal.Shared.Models.Constants
@using OptechX.Portal.Shared.Helper

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService
@inject ISupportTicketService SupportTicketService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Submit Support Ticket</h3>

<EditForm EditContext="editContext" OnValidSubmit="SubmitTicket">
    <div class="form-row">
        <div class="form-group col-md-12 col-lg-8 mb-2">
            <label>Priority:</label>
            <InputSelect class="form-control" @bind-Value="ticket.Priority">
                @foreach (IssuePriority priority in Enum.GetValues(typeof(IssuePriority)))
                {
                    <option value="@priority">@GetEnumPriorityStringValue(priority)</option>
                }
            </InputSelect>
        </div>

        <div class="form-group col-md-12 col-lg-8 mb-2">
            <label>Category:</label>
            <InputSelect class="form-control" @bind-Value="ticket.Type">
                @foreach (IssueType type in Enum.GetValues(typeof(IssueType)))
                {
                    <option value="@type">@GetEnumTypeStringValue(type)</option>
                }
            </InputSelect>
        </div>

        <div class="form-group col-md-12 col-lg-8 mb-2">
            <label for="subject">Subject:</label>
            <InputText id="subject" class="form-control" @bind-Value="ticket.Subject" />
        </div>

        <div class="form-group col-md-12 col-lg-8 mb-2">
            <label for="message">Message:</label>
            <InputTextArea id="message" class="form-control" @bind-Value="ticket.Message"></InputTextArea>
        </div>

        @*<div class="form-group col-md-12 col-lg-8 mb-2">
                <label for="attachment">Attachment:</label>
                <InputFile id="attachment" OnChange="HandleFileChange" />
            </div>*@
    </div>

    @if (isSubmitted)
    {
        <button type="submit" class="btn btn-primary" disabled>Submit</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Submit</button>
    }

</EditForm>


@code {
    private string accountId = string.Empty;
    private SupportTicket ticket = new SupportTicket();
    private bool isSubmitted = false;

    private EditContext? editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(ticket);
        var isAuthd = await LocalStorageService.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(isAuthd))
        {
            await GetAccountId();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async void SubmitTicket()
    {
        // Perform ticket submission logic here
        // For demonstration purposes, we'll just set isSubmitted to true
        isSubmitted = true;
        ticket.UserId = Guid.Parse(accountId);
        ticket.Status = IssueStatus.OPEN;
        ticket.Updated = DateTime.UtcNow;
        await SupportTicketService.PostSupportTicket(ticket: ticket);
        await Task.Delay(1000);
        NavigationManager.NavigateTo("/support");
    }

    private string GetEnumPriorityStringValue(IssuePriority priority)
    {
        var enumMember = priority.GetType().GetMember(priority.ToString())[0];
        var attribute = enumMember.GetCustomAttributes(typeof(EnumStringValueAttribute), false).FirstOrDefault() as EnumStringValueAttribute;
        return attribute?.Value ?? priority.ToString();
    }

    private string GetEnumTypeStringValue(IssueType type)
    {
        var enumMember = type.GetType().GetMember(type.ToString())[0];
        var attribute = enumMember.GetCustomAttributes(typeof(EnumStringValueAttribute), false).FirstOrDefault() as EnumStringValueAttribute;
        return attribute?.Value ?? type.ToString();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            //ticket.Attachment = new AttachmentFile
            //{
            //    FileName = file.Name,
            //    Data = stream.ToArray()
            //};

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetAccountId()
    {
        accountId = await LocalStorageService.GetItemAsync<string>("accountId");
        await JSRuntime.InvokeVoidAsync("console.log", accountId);
    }
}
