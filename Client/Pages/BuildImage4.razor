@page "/buildimage4"
@using OptechX.Portal.Client.Shared
@using OptechX.Portal.Shared.Models.Forms
@using OptechX.Portal.Shared.Models.Engine.ImageBuilds
@inject IToastService ToastService
@inject IFormsService FormsService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>OptechX Portal</PageTitle>

<AuthorizeView>
    <Authorized>
        <BuildImageComponent04 />
    </Authorized>
    <NotAuthorized>
        <p>User is not authorized. Redirecting...</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string accountId = string.Empty;
    private string? param1 { get; set; }
    private string? param2 { get; set; }
    private string? param3 { get; set; }
    private string? param4 { get; set; }
    private string? param5 { get; set; }
    private string? param6 { get; set; }
    private string? param7 { get; set; }
    private string? param8 { get; set; }
    private string? param9 { get; set; }
    private string? param10 { get; set; }
    private string? param11 { get; set; }
    private string? param12 { get; set; }
    private string? param13 { get; set; }
    private bool param14 { get; set; }
    private bool param15 { get; set; }
    private bool param16 { get; set; }
    private bool param17 { get; set; }
    private bool param18 { get; set; }
    private bool param19 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isAuthd = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(isAuthd))
        {
            accountId = await GetAccountId();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task<string> GetAccountId()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var accountIdClaim = authenticationState.User.Claims.FirstOrDefault(claim => claim.Type == "AccountId"); //"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");
        if (!string.IsNullOrEmpty(accountIdClaim?.Value))
        {
            return accountIdClaim!.Value;
        }
        else
        {
            return Guid.Empty.ToString();
        }
    }

    private async Task GetRequiredParams()
    {
        param1 = await LocalStorage.GetItemAsStringAsync("imageParam1");
        param2 = await LocalStorage.GetItemAsStringAsync("imageParam2");
        param3 = await LocalStorage.GetItemAsStringAsync("imageParam3");
        param4 = await LocalStorage.GetItemAsStringAsync("imageParam4");
        param5 = await LocalStorage.GetItemAsStringAsync("imageParam5");
        param6 = await LocalStorage.GetItemAsStringAsync("imageParam6");
        param7 = await LocalStorage.GetItemAsStringAsync("imageParam7");
        param8 = await LocalStorage.GetItemAsStringAsync("imageParam8");
        param9 = await LocalStorage.GetItemAsStringAsync("imageParam9");
        param10 = await LocalStorage.GetItemAsStringAsync("imageParam10");
        param11 = await LocalStorage.GetItemAsStringAsync("imageParam11");
        param12 = await LocalStorage.GetItemAsStringAsync("imageParam12");
        param13 = await LocalStorage.GetItemAsStringAsync("imageParam13");
        param14 = await LocalStorage.GetItemAsync<bool>("imageParam14");
        param15 = await LocalStorage.GetItemAsync<bool>("imageParam15");
        param16 = await LocalStorage.GetItemAsync<bool>("imageParam16");
        param17 = await LocalStorage.GetItemAsync<bool>("imageParam17");
        param18 = await LocalStorage.GetItemAsync<bool>("imageParam18");
        param19 = await LocalStorage.GetItemAsync<bool>("imageParam19");

        bool allParamsNotEmpty = new[] { param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, }.All(p => string.IsNullOrWhiteSpace(p));

        if (allParamsNotEmpty)
        {
            ToastService.ShowError("Image build process not started, redirecting...");
            NavigationManager.NavigateTo("/buildimage");
        }
    }
}

