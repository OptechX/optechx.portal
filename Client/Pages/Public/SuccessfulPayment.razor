@page "/successfulpayment"
@inject ILocalStorageService LocalStorageService
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>OptechX Portal</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="success-message">
                <h2>Payment Successful</h2>
                <p>Thank you for your subscription purchase!</p>
                <p>Please allow up to 15 minutes for your account to reflect your subscription purchase.</p>
                <p>If you didn't have an account, an account has is being generated for you. A welcome email will be sent out shortly with further instructions.</p>
            </div>
            <div class="note">Note: New account generation can take up to 15 minutes.</div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <div class="success-message">
                <h2>Payment Successful</h2>
                <p>Thank you for your subscription purchase!</p>
                <p>Please allow up to 15 minutes for your account to reflect your subscription purchase.</p>
                <p>If you didn't have an account, an account has is being generated for you. A welcome email will be sent out shortly with further instructions.</p>
            </div>
            <div class="note">Note: New account generation can take up to 15 minutes.</div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string accountId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var userIsAuthorized = await LocalStorageService.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(userIsAuthorized))
        {
            int result = await AuthService.VerifyTokenValidity();
            if (result != 0)
                Logout();
            accountId = await GetAccountId();
        }
        else
        {
            //NavigationManager.NavigateTo("/");
        }
    }

    private async Task<string> GetAccountId()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var accountIdClaim = authenticationState.User.Claims.FirstOrDefault(claim => claim.Type == "AccountId"); //"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");
        if (!string.IsNullOrEmpty(accountIdClaim?.Value))
        {
            return accountIdClaim!.Value;
        }
        else
        {
            return Guid.Empty.ToString();
        }
    }

    private async void Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
        //NavigationManager.NavigateTo("/");
    }
}

