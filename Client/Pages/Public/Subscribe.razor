@page "/subscribe"
@inject ILocalStorageService LocalStorageService
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>OptechX Portal</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>User is authorized. Redirecting...</p>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg">
                    <h1 class="text-center mt-4 text-white">We offer plans that help any business!</h1>
                    <div class="text-center mt-4">
                        <stripe-pricing-table pricing-table-id="prctbl_1NqDcEKcwfnufCukrzJC12Rq"
                                              publishable-key="pk_live_51HiceVKcwfnufCukysfNCrit41gP7mloLigxYx0DFDZypWa4V6nzrxQtBgwPwKU5mVa4fzx4MKQQ61hAJSRLXSuJ00vUV97aru">
                        </stripe-pricing-table>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string accountId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var userIsAuthorized = await LocalStorageService.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(userIsAuthorized))
        {
            int result = await AuthService.VerifyTokenValidity();
            if (result != 0)
                Logout();
            accountId = await GetAccountId();
        }
    }

    private async Task<string> GetAccountId()
    {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var accountIdClaim = authenticationState.User.Claims.FirstOrDefault(claim => claim.Type == "AccountId"); //"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");
        if (!string.IsNullOrEmpty(accountIdClaim?.Value))
        {
            return accountIdClaim!.Value;
        }
        else
        {
            return Guid.Empty.ToString();
        }
    }

    private async void Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }
}

