@page "/buildimage2"
@using OptechX.Portal.Shared.Models.Forms
@using OptechX.Portal.Shared.Models.Engine.ImageBuilds
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IFormsService FormsService

@inject IJSRuntime JSRuntime

<PageTitle>OptechX Portal</PageTitle>

<h3>Applications</h3>

<!-- Table View -->
<div style="height: 200px; overflow-y: auto; border: 1px solid #ccc; border-radius: 5px;" class="mb-3">
    <table style="width: 100%;">
        <thead>
            <tr class="mb-3">
                <th style="width: 20px; padding-left: 3px;"><i class="bi bi-check-square"></i></th>
                <th style="width: 20px;"></th>
                <th>Publisher</th>
                <th>Name</th>
                <th>Version</th>
                <th style="width: fit-content;">Category</th>
                <th>Last Updated</th>
                <th>Docs</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in FormsService.ApplicationTableApiResults)
                {
                <tr>
                    <td style="padding-left: 3px;">
                        <label style="display: inline-block; padding-left: 3px;">
                            <input type="checkbox" checked="@SelectedItems.Contains(item.Uid!)" @onclick="() => ToggleItemSelection(item.Uid!)" disabled="@IsReadOnly" />
                        </label>
                    </td>
                    <td style="display: flex; align-items: center;">
                        <img src="@item.Icon" alt="Item Image" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" />
                    </td>
                    <td>
                        @item.Publisher
                    </td>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @item.Version
                    </td>
                    <td>
                        @switch (@item.Category)
                            {
                                case "INTERNET":<i class="bi bi-globe2 custom-icon"></i>; break;
                            }
                    </td>
                    <td>
                        @item.LastUpdated
                    </td>
                    <td>
                        <a href="@item.Docs" target="_blank" class="btn btn-primary btn-sm">Open Docs</a>
                    </td>
                </tr>
                }
        </tbody>
    </table>
</div>

<h3>Drivers</h3>

<!-- Drivers Table View -->
<div style="height: 200px; overflow-y: auto; border: 1px solid #ccc; border-radius: 5px;" class="mb-3">
    <table style="width: 100%;">
        <thead>
            <tr class="mb-3">
                <th style="width: 30px; padding-left: 3px;"><i class="bi bi-check-square"></i></th>
                <th style="width: 30px;"></th>
                <th style="width: fit-content;">
                    Make&nbsp;
                    <button @onclick="() => SortByColumn(sortColumnMake)" class="btn btn-primary btn-sm" style="cursor: pointer;">
                        @((MarkupString)(SortColumn == "Make" ? (SortAscending ? "&#x25B2;" : "&#x25BC;") : "&#x2195;"))
                    </button>
                </th>
                <th style="width: fit-content;">
                    Model&nbsp;
                    <button @onclick="() => SortByColumn(sortColumModel)" class="btn btn-primary btn-sm" style="cursor: pointer;">
                        @((MarkupString)(SortColumn == "Model" ? (SortAscending ? "&#x25B2;" : "&#x25BC;") : "&#x2195;"))
                    </button>
                </th>
                <th style="width: fit-content;">
                    Updated&nbsp;
                    <button @onclick="() => SortByColumn(sortColumnUpdated)" class="btn btn-primary btn-sm" style="cursor: pointer;">
                        @((MarkupString)(SortColumn == "Updated" ? (SortAscending ? "&#x25B2;" : "&#x25BC;") : "&#x2195;"))
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in FormsService.DriverTableApiResults)
                {
                <tr>
                    <td style="padding-left: 3px;">
                        <label style="display: inline-block; padding-left: 3px;">
                            <input type="checkbox" checked="@SelectedItems.Contains(item.Uid!)" @onclick="() => ToggleItemSelection(item.Uid!)" disabled="@IsReadOnly" />
                        </label>
                    </td>
                    <td style="display: flex; align-items: center;">
                        @switch (item.Oem)
                        {
                            case "Dell":<img src="/img/oem-logos/Dell_Logo.png" alt="Dell logo" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" /> break;
                            case "Lenovo": <img src="/img/oem-logos/Lenovo_Corporate_Logo.png" alt="Lenovo Logo" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" />break;
                            case "Microsoft": <img src="/img/oem-logos/microsoft-icon.png" alt="Lenovo Logo" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" />break;
                            case "Acer": <img src="/img/oem-logos/Acer_Logo.png" alt="Lenovo Logo" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" />break;
                            case "Asus": <img src="/img/oem-logos/ASUS_Logo.png" alt="Lenovo Logo" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" />break;
                            case "HP": <img src="/img/oem-logos/HP_New_Logo_2D.png" alt="Lenovo Logo" style="height: 2em; margin-left: 0.5em; margin-right: 0.5em;" />break;
                        }
                    </td>
                    <td>
                        @item.Make
                    </td>
                    <td>
                        @item.Model
                    </td>
                    <td>
                        @item.LastUpdated.ToShortDateString()
                    </td>
                </tr>
                }
        </tbody>
    </table>
</div>



@code {
    ImageBuildBasic? imageBuild;

    public bool IsReadOnly { get; set; }
    public bool IsDriverReadOnly { get; set; }
    private string sortColumModel = "Model";
    private string sortColumnUpdated = "Updated";
    private string sortColumnMake = "Make";

    public List<string> SelectedItems { get; set; } = new List<string>();
    public List<string> SelectedApplicationItems { get; set; } = new List<string>();
    public List<string> SelectedDriverItems { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
    }

    private async Task InitializeAsync()
    {
        // Retrieve query parameters
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var release = query["param1"];  // Windows 10
        var edition = query["param2"];  // Enterprise
        var version = query["param3"];  // 21H1
        var arch = query["param4"];     // x64
        var language = query["param5"]; // Danish
        var format = query["param6"];   // ISO

        //if (!string.IsNullOrEmpty(release))
        //    imageBuild!.WindowsRelease = release;


        // Initialize the imageBuild object with the retrieved values
        imageBuild = new ImageBuildBasic
        {
            WindowsRelease = release,
            WindowsEdition = edition,
            WindowsVersion = version,
            Arch = arch,
            Language = language,
            ImageFormat = format,
        };

        // Perform any additional asynchronous initialization tasks here if needed
        var getApplicationTask = arch != null ? FormsService.GetApplicationTableApiResultsAsync(select: arch.ToLower()) : Task.CompletedTask;
        var getDriverTask = release != null ? FormsService.GetDriverTableApiResultsAsync(select: release) : Task.CompletedTask;

        await Task.WhenAll(getApplicationTask, getDriverTask);

        // Unlock all fields
        IsReadOnly = false;
        IsDriverReadOnly = false;
    }


    private void ToggleItemSelection(string item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
            ToastService.ShowInfo($"Item Removed 1: {item}");
            ToastService.ShowError($"Item Removed 2: {item}");
            ToastService.ShowSuccess($"Item Removed 3: {item}");
            ToastService.ShowWarning($"Item Removed 4: {item}");
            ToastService.ShowToast(ToastLevel.Success, message: "<i class=\"bi bi-twitter\">");
        }
        else
        {
            SelectedItems.Add(item);
            ToastService.ShowInfo($"Item Added: {item}");
        }
    }

    private async Task RunButtonAsync()
    {
        IsReadOnly = true; // Disable checkbox list
        StateHasChanged(); // Notify Blazor to re-render the component

        await Task.Run(() =>
        {
            foreach (string i in SelectedItems)
            {
                ToastService.ShowInfo($"App selected: {i}");
            }
        });

        //IsReadOnly = false; // Enable checkbox list after task completion
        //StateHasChanged(); // Notify Blazor to re-render the component
    }

    // Sort Functions
    private string? SortColumn { get; set; }
    private bool SortAscending { get; set; } = true;

    private void SortByColumn(string column)
    {
        if (SortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            SortColumn = column;
            SortAscending = true;
        }

        FormsService.DriverTableApiResults = SortData(FormsService.DriverTableApiResults);
    }

    private List<DriverTableApiResult> SortData(List<DriverTableApiResult> data)
    {
        switch (SortColumn)
        {
            case "Make":
                return SortAscending ? data.OrderBy(item => item.Make).ToList() : data.OrderByDescending(item => item.Make).ToList();
            case "Model":
                return SortAscending ? data.OrderBy(item => item.Model).ToList() : data.OrderByDescending(item => item.Model).ToList();
            case "Updated":
                return SortAscending ? data.OrderBy(item => item.LastUpdated).ToList() : data.OrderByDescending(item => item.LastUpdated).ToList();
            default:
                return data;
        }
    }

}
