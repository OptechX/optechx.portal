@page "/buildimage2"
@using OptechX.Portal.Shared.Models.Engine.ImageBuilds
@inject IToastService ToastService

<PageTitle>OptechX Portal</PageTitle>

<h3>Build Image</h3>

<EditForm OnValidSubmit="HandleSubmitImageBuild">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <!-- ROW -->
    <div class="row mb-3">
        <!-- Column 1 -->
        <div class="col-6">
            <!-- Windows Release (Win10, Win11) -->
            <div class="form-group mb-3">
                <label for="windowsRelease">Release</label>
                <InputSelect id="windowsRelease" @bind-Value="selectWindowsRelease" @onchange="OnWindowsReleaseChanged" @readonly="isWindowsReleaseReadOnly" class="form-control">
                    <option value="WIN10">Windows 10</option>
                    <option value="WIN11">Windows 11</option>
                </InputSelect>
            </div>
        </div>
        <!-- Column 2 -->
        <div class="col-6">
            <!-- Windows Edition (Pro, etc) -->
            <div class="form-group mb-3">
                <label for="windowsEdition">Edition</label>
                <InputSelect id="windowsEdition" @bind-Value="selectWindowsEdition" @onchange="OnWindowsEditionChanged" @readonly="isWindowsEditionReadOnly" class="form-control">
                    @foreach (var edition in winEditions)
                    {
                        <option value="@edition">@edition</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <!-- END ROW -->

    <!-- Submit button -->
    @if (showSubmitButton)
    {
        <button type="submit" class="btn btn-primary">Submit</button>
    }
    else
    {
        <button type="submit" class="btn btn-secondary" style="cursor: not-allowed; font-style: italic;" disabled>Submitting...</button>
    }
</EditForm>

@code {
    private ImageBuild imageBuild = new ImageBuild();
    private bool showSubmitButton;
    private List<string> winEditions = new List<string>();

    // form bool controls
    private bool isWindowsReleaseReadOnly;  // step 1
    private bool isWindowsEditionReadOnly;  // step 2

    // form components
    private string selectWindowsRelease = string.Empty;
    private string selectWindowsEdition = string.Empty;
    private string selectWindowsVersion = string.Empty;
    private string selectCpuArch = string.Empty;
    private string selectLcid = string.Empty;
    private string selectImageFormat = string.Empty;
    private List<string> selectDrivers = new List<string>();
    private List<string> selectApplications = new List<string>();
    private List<string> selectAppxProvisionedPackages = new List<string>();
    private List<string> selectWindowsCapabilities = new List<string>();
    private List<string> selectWindowsOptionalFeatures = new List<string>();
    private List<string> selectCustomRegistryStrings = new List<string>();
    private bool selectNotifyBuildCompelte;
    private bool selectNotifyCICDComplete;
    private bool selectContinuousIntegrationApplications;
    private bool selectContinuousIntegrationDrivers;
    private bool selectContinuousDeployment;
    private bool selectIntegrateSecurityPatches;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000);
        showSubmitButton = true;

        // set first field to enabled
        isWindowsReleaseReadOnly = false;

        // set all fields to disabled
        isWindowsEditionReadOnly = true;
    }

    private void HandleSubmitImageBuild()
    {
        showSubmitButton = false;
        ToastService.ShowInfo("Received image request");
    }

    private async Task FetchImageFormats()
    {
        await Task.Delay(1000);
        // Make API call here and populate the 'imageFormats' list
        // based on the selectedWindowsRelease value
        // You can use HttpClient or any other mechanism to call the API
        // and deserialize the response to populate the list.
    }

    private async Task OnWindowsReleaseChanged()
    {
        await FetchImageFormats();
        switch (selectWindowsRelease)
        {
            case "WIN10":
                winEditions.Add("Home");
                winEditions.Add("Pro");
                winEditions.Add("Pro N");
                winEditions.Add("Education");
                winEditions.Add("Education N");
                winEditions.Add("Enterprise");
                winEditions.Add("Enterprise N");
                winEditions.Add("Pro Education");
                winEditions.Add("Pro Education N");
                winEditions.Add("Pro Workstations");
                winEditions.Add("Pro N Workstations");
                winEditions.Add("Enterprise LTSC");
                break;
            case "WIN11":
                winEditions.Add("Home");
                winEditions.Add("Pro");
                winEditions.Add("Pro Education");
                winEditions.Add("Pro for Workstations");
                winEditions.Add("Enterprise");
                break;
        }
    }

    private async Task OnWindowsEditionChanged()
    {
        await FetchImageFormats();
    }
    }

